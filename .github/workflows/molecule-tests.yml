name: Molecule Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ansible/**'
      - 'pulumi/**'
      - '.github/workflows/molecule-tests.yml'
      - 'pyproject.toml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ansible/**'
      - 'pulumi/**'
      - '.github/workflows/molecule-tests.yml'
      - 'pyproject.toml'
  workflow_dispatch:
    inputs:
      debug:
        type: boolean
        description: 'Enable Debug Mode'
        default: false
      roles:
        type: string
        description: 'Comma-separated roles to test'
        default: 'all'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ]; then pip install -e .[dev]; fi
          pip install pre-commit ansible-lint

      - name: Run pre-commit checks
        run: pre-commit run --all-files --show-diff-on-failure

  molecule:
    name: Molecule Test - ${{ matrix.role }}
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        role:
          - k3s_server
          - k3s_agent
          - common
          - jetson_setup
          - home_assistant_integration
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Set up Loki for log collection
        run: |
          mkdir -p /tmp/loki
          docker run -d --name loki -p 3100:3100 grafana/loki:latest
          echo "LOKI_URL=http://localhost:3100/loki/api/v1/push" >> $GITHUB_ENV
          echo "TEST_RUN_ID=github-${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run Molecule tests
        run: |
          python -m molecule test -s default
        env:
          MOLECULE_ROLE: ${{ matrix.role }}
          ANSIBLE_FORCE_COLOR: "1"

      - name: Generate JUnit Report
        if: always()
        run: |
          python -m molecule test -s default --destroy=never --reporter junit --out junit-${{ matrix.role }}.xml
        env:
          MOLECULE_ROLE: ${{ matrix.role }}
          ANSIBLE_FORCE_COLOR: "1"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results-${{ matrix.role }}
          path: junit-${{ matrix.role }}.xml

  pulumi-integration:
    name: Pulumi Integration
    runs-on: ubuntu-latest
    needs: molecule
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          cd pulumi/cluster-setup && npm ci

      - name: Run Pulumi-Molecule integration tests
        run: |
          cd pulumi
          python -m molecule test -s default
        env:
          ANSIBLE_FORCE_COLOR: "1"
          PULUMI_CONFIG_PASSPHRASE: "test-passphrase"
          PULUMI_BACKEND_URL: "file:///tmp/pulumi-test-state"

  aggregate-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [molecule, pulumi-integration]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-results

      - name: Display structure of downloaded artifacts
        run: ls -R test-results

      - name: Generate combined test report
        uses: dorny/test-reporter@v1
        with:
          name: Test Results
          path: 'test-results/**/*.xml'
          reporter: jest-junit
          fail-on-error: false

      - name: Archive test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            */report.html
            */junit-*.xml
            */molecule/*.log
