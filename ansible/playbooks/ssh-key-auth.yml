---
- name: Configure SSH Key-Based Authentication and Secure SSHD
  hosts: all
  become: true # Most tasks require root privileges
  gather_facts: true
  vars:
    # Define the user for whom SSH keys will be managed on remote hosts
    # This user should exist on all target nodes.
    ssh_user: "{{ ansible_user | default(lookup('env', 'USER')) }}"
    # Define the path for the SSH key pair on the Ansible controller
    controller_ssh_key_private: "{{ lookup('env', 'HOME') }}/.ssh/id_ed25519_homelab"
    controller_ssh_key_public: "{{ lookup('env', 'HOME') }}/.ssh/id_ed25519_homelab.pub"
    # SSHD configuration settings (Best Practices)
    sshd_settings:
      - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
      - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin prohibit-password' } # Or 'no'
      - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
      - { regexp: '^#?ChallengeResponseAuthentication', line: 'ChallengeResponseAuthentication no' }
      # Optional: Restrict logins to specific users/groups
      # - { regexp: '^#?AllowUsers', line: 'AllowUsers {{ ssh_user }} another_admin' }
      # - { regexp: '^#?AllowGroups', line: 'AllowGroups admin sudo' }

  tasks:
    # --- Task Block 1: Generate SSH Key Pair on Controller (if needed) ---
    - name: Block for Controller Key Generation
      delegate_to: localhost
      run_once: true
      block:
        - name: Check if SSH key pair exists on controller
          ansible.builtin.stat:
            path: "{{ controller_ssh_key_private }}"
          register: ssh_key_stat

        - name: Generate ED25519 SSH key pair on controller
          ansible.builtin.command:
            cmd: "ssh-keygen -t ed25519 -f {{ controller_ssh_key_private }} -N '' -C 'homelab-ansible-key'"
            creates: "{{ controller_ssh_key_private }}"
          when: not ssh_key_stat.stat.exists
          changed_when: true # Mark as changed when key is created

        - name: Read public key content from controller
          ansible.builtin.slurp:
            src: "{{ controller_ssh_key_public }}"
          register: controller_public_key_content
          when: ssh_key_stat.stat.exists or ssh_key_stat.stat.isreg is defined # Ensure key exists after potential creation

    # --- Task Block 2: Distribute Public Key to Managed Nodes ---
    - name: Ensure .ssh directory exists for user {{ ssh_user }} on managed nodes
      ansible.builtin.file:
        path: "/home/{{ ssh_user }}/.ssh"
        state: directory
        owner: "{{ ssh_user }}"
        group: "{{ ssh_user }}" # Adjust group if needed
        mode: '0700'

    - name: Distribute controller's public key to managed nodes
      ansible.posix.authorized_key:
        user: "{{ ssh_user }}"
        key: "{{ controller_public_key_content.content | b64decode }}"
        path: "/home/{{ ssh_user }}/.ssh/authorized_keys"
        state: present
        mode: '0600'
      when: controller_public_key_content.content is defined

    # --- Task Block 3: Configure and Secure SSH Daemon ---
    - name: Apply security settings to /etc/ssh/sshd_config
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        validate: '/usr/sbin/sshd -t -f %s' # Validate config before applying
        backup: true
      loop: "{{ sshd_settings }}"
      notify: Restart sshd

    # --- Task Block 4: Configure SSH Client on Controller (Optional) ---
    - name: Block for Controller SSH Client Config
      delegate_to: localhost
      run_once: true
      become: false # Run as the user executing Ansible
      block:
        - name: Ensure .ssh directory exists on controller
          ansible.builtin.file:
            path: "{{ lookup('env', 'HOME') }}/.ssh"
            state: directory
            mode: '0700'

        - name: Configure SSH client for easy access to homelab nodes
          ansible.builtin.blockinfile:
            path: "{{ lookup('env', 'HOME') }}/.ssh/config"
            block: |
              # BEGIN ANSIBLE MANAGED BLOCK (Homelab SSH Config)
              {% for host in ansible_play_hosts_all %}
              Host {{ hostvars[host].inventory_hostname }}
                HostName {{ hostvars[host].ansible_host | default(hostvars[host].inventory_hostname) }}
                User {{ ssh_user }}
                IdentityFile {{ controller_ssh_key_private }}
                IdentitiesOnly yes
                StrictHostKeyChecking no # Consider 'accept-new' or manual management for production
                UserKnownHostsFile /dev/null # Be cautious with this in production
              {% endfor %}
              # END ANSIBLE MANAGED BLOCK
            marker: "# {mark} ANSIBLE MANAGED BLOCK (Homelab SSH Config)"
            create: true
            mode: '0600'

    # --- Task Block 5: Test Connectivity ---
    - name: Test SSH connectivity from controller to managed nodes using keys
      delegate_to: localhost
      become: false # Test as the Ansible user on the controller
      ansible.builtin.command:
        # Use options from generated config if possible, or specify manually
        cmd: "ssh -o BatchMode=yes -o ConnectTimeout=5 {{ item }} hostname"
      register: ssh_test_result
      loop: "{{ ansible_play_hosts_all }}"
      changed_when: false
      failed_when: ssh_test_result.rc != 0
      loop_control:
        label: "{{ item }}"
      run_once: true # Run tests after all configurations are done

    - name: Alternative connectivity test using Ansible ping module
      ansible.builtin.ping:
      # This implicitly tests SSH connectivity using Ansible's connection method

  handlers:
    - name: Restart sshd
      ansible.builtin.service:
        name: sshd # Service name might be 'ssh' on older Debian/Ubuntu
        state: restarted
      listen: Restart sshd # Explicitly listen for the notification name
