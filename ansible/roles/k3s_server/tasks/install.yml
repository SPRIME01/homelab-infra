---
- name: Check if K3s binary exists
  ansible.builtin.stat:
    path: "{{ k3s_server_install_dir }}/k3s"
  register: k3s_binary
  when: not k3s_server_skip_download | default(false)

- name: Mock K3s binary existence in check mode
  ansible.builtin.set_fact:
    k3s_binary:
      stat:
        exists: true
  when: ansible_check_mode or k3s_server_skip_download | default(false)

- name: Download K3s binary
  ansible.builtin.get_url:
    url: "{{ k3s_server_release_url }}"
    dest: "{{ k3s_server_install_dir }}/k3s"
    mode: '0755'
    owner: root
    group: root
  when: not k3s_binary.stat.exists and not ansible_check_mode and not k3s_server_skip_download | default(false)
  become: true

- name: Create K3s service file
  ansible.builtin.template:
    src: k3s.service.j2
    dest: "{{ k3s_server_systemd_dir }}/{{ k3s_server_service_name }}.service"
    mode: '0644'
    owner: root
    group: root
  notify:
    - Restart K3s
  when: not ansible_check_mode and not k3s_server_skip_service | default(false)
  become: true

- name: Create K3s systemd environment file
  ansible.builtin.template:
    src: k3s.env.j2
    dest: "{{ k3s_server_systemd_dir }}/{{ k3s_server_service_name }}.env"
    mode: '0644'
    owner: root
    group: root
  notify:
    - Restart K3s
  when: not ansible_check_mode and not k3s_server_skip_service | default(false)
  become: true

- name: Start and enable K3s service
  ansible.builtin.systemd:
    name: "{{ k3s_server_service_name }}"
    state: started
    enabled: true
    daemon_reload: true
  when: not ansible_check_mode and not k3s_server_skip_service | default(false)
  become: true

- name: Log K3s server installation status
  ansible.builtin.debug:
    msg: "K3s server installation status: {{ k3s_binary }}"

- name: Validate K3s server installation
  ansible.builtin.assert:
    that:
      - k3s_binary.stat.exists
    fail_msg: "K3s server installation failed"
