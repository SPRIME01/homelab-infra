---
# Test playbook for k3s_server role
- name: Test k3s_server role
  hosts: localhost
  connection: local
  gather_facts: true
  become: true
  become_method: sudo
  # No ask_become_pass since we handle this in the test script

  vars:
    # Force testing mode, which will mock required resources
    k3s_server_testing: true
    ansible_check_mode: false

    # Role configuration vars
    k3s_server_version: "v1.26.6+k3s1"
    k3s_server_wsl_specific: true
    k3s_server_disable_traefik: true
    k3s_server_disable_servicelb: true
    k3s_server_enable_metrics_server: true
    ansible_python_interpreter: "{{ ansible_playbook_python }}"

  pre_tasks:
    - name: Verify sudo access works
      ansible.builtin.command: whoami
      changed_when: false
      register: whoami

    - name: Display current user
      ansible.builtin.debug:
        msg: "Running as {{ whoami.stdout }}"

    - name: Create required test directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: root
        group: root
      loop:
        - "/var/lib/rancher/k3s"
        - "/var/lib/rancher/k3s/server"
        - "/etc/rancher/k3s"
        - "/etc/rancher/k3s/server"
        - "/etc/rancher/k3s/manifests"
        - "/etc/systemd/system"
      become: true

    - name: Create mock test flag file
      ansible.builtin.copy:
        content: "Testing mode enabled"
        dest: "{{ k3s_server_config_dir }}/.testing_mock"
        mode: '0644'
      become: true

    - name: Create mock node token for testing
      ansible.builtin.copy:
        content: "{{ k3s_server_mock_token }}"
        dest: "{{ k3s_server_token_file }}"
        mode: '0600'
        owner: root
        group: root
      become: true
      when: k3s_server_testing

    - name: Ensure k3s directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ k3s_server_data_dir }}"
        - "{{ k3s_server_data_dir }}/server"
        - "{{ k3s_server_config_dir }}"
        - "{{ k3s_server_config_dir }}/server"
      become: true

  # Apply role only once
  roles:
    - role: ../../../roles/k3s_server
      tags: k3s

  tasks:
    - name: Verify K3s binary is installed
      ansible.builtin.stat:
        path: /usr/local/bin/k3s
      register: k3s_binary
      failed_when: not k3s_binary.stat.exists

    - name: Verify K3s version
      ansible.builtin.command: /usr/local/bin/k3s --version
      register: k3s_ver
      changed_when: false
      failed_when: k3s_server_version not in k3s_ver.stdout

    - name: Verify K3s service is running
      ansible.builtin.systemd:
        name: k3s
        state: started
      register: k3s_service
      failed_when: not k3s_server_testing and not k3s_service.status.ActiveState == "active"
      ignore_errors: "{{ k3s_server_testing | bool }}"

    - name: Debug K3s service logs
      ansible.builtin.shell: journalctl -u k3s --no-pager
      register: k3s_logs
      changed_when: false
      ignore_errors: true

    - name: Display K3s service logs
      ansible.builtin.debug:
        var: k3s_logs.stdout_lines

    - name: Skip unsupported tasks in check mode
      ansible.builtin.meta: end_play
      when: ansible_check_mode

    - name: Verify K3s configuration file exists
      ansible.builtin.stat:
        path: /etc/rancher/k3s/config.yaml
      register: k3s_config
      failed_when: not k3s_config.stat.exists

    - name: Verify K3s config file contains expected settings
      ansible.builtin.command: grep -q "{{ item }}" /etc/rancher/k3s/config.yaml
      with_items:
        - "disable-traefik: true"
        - "disable-servicelb: true"
      changed_when: false

    - name: Verify kubeconfig file exists
      ansible.builtin.stat:
        path: /etc/rancher/k3s/k3s.yaml
      register: kubeconfig
      failed_when: not kubeconfig.stat.exists

    - name: Verify kubeconfig permissions
      ansible.builtin.stat:
        path: /etc/rancher/k3s/k3s.yaml
      register: kubeconfig_perms
      failed_when: kubeconfig_perms.stat.mode != "0644"

    - name: Verify both possible node-token paths
      ansible.builtin.stat:
        path: "{{ item }}"
      register: node_token_paths
      failed_when: false
      with_items:
        - "/var/lib/rancher/k3s/server/node-token"
        - "/etc/rancher/k3s/server/node-token"

    - name: Display node token paths status
      ansible.builtin.debug:
        msg: "Node token at {{ item.item }}: {{ 'exists' if item.stat.exists else 'missing' }}"
      with_items: "{{ node_token_paths.results }}"

    - name: Wait for K3s API to be available
      ansible.builtin.uri:
        url: https://localhost:6443/healthz
        validate_certs: false
        return_content: true
      register: api_health
      until: api_health.status == 200
      retries: 10
      delay: 5
      ignore_errors: true

    - name: Check if kubectl command works
      ansible.builtin.command: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml get nodes
      register: kubectl_result
      changed_when: false
      ignore_errors: true

    - name: Verify node has expected labels
      ansible.builtin.shell: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml get node {{ ansible_hostname }} -o jsonpath='{.metadata.labels}'
      register: node_labels
      changed_when: false
      ignore_errors: true

    - name: Display test results summary
      ansible.builtin.debug:
        msg: |
          K3s Server Test Results:
          - K3s binary installed: {{ k3s_binary.stat.exists }}
          - K3s version correct: {{ k3s_server_version in (k3s_ver.stdout | default('')) }}
          - K3s service active: {{ k3s_service.status.ActiveState == "active" }}
          - Config file exists: {{ k3s_config.stat.exists }}
          - Kubeconfig exists: {{ kubeconfig.stat.exists }}
          - Node token exists: {{ node_token.stat.exists }}
          - API responding: {{ api_health.status == 200 if not api_health.failed else false }}
          - kubectl working: {{ not kubectl_result.failed }}

  post_tasks:
    - name: Final test check
      ansible.builtin.assert:
        that:
          - k3s_binary.stat.exists
          - k3s_server_version in k3s_ver.stdout
          - k3s_config.stat.exists
          - kubeconfig.stat.exists
          - node_token.stat.exists | bool or k3s_server_testing | bool
        fail_msg: "One or more K3s server tests failed"
        success_msg: "All K3s server tests passed"
      ignore_errors: "{{ k3s_server_testing | bool }}"
